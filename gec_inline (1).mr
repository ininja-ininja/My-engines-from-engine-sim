//* Generated with Enginette (https://enginette.netlify.app) by DDev, Pooria and zRevenger.
//* More info here: https://github.com/enginette/enginette
//! Warning: Enginette EXporter is still in developement. Expect bugs to happen.
//! If you encounter a bug, report it here: https://github.com/enginette/enginette/issues
                    
import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)
private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
}

private node gec_inline_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6000 * units.rpm;
    input limiter_duration: 0.1 * units.sec;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0 + 0) * units.deg)
            .connect_wire(wires.wire2, (0 + 180) * units.deg)
            .connect_wire(wires.wire3, (0 + 180) * units.deg)
            .connect_wire(wires.wire4, (0 + 0) * units.deg);
}

private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}

private node gec_inline_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 160 * units.deg,
            gamma: 1,
            lift: 200 * units.thou,
            steps: 100
        );
}

private node gec_inline_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 160 * units.deg,
            gamma: 1,
            lift: 200 * units.thou,
            steps: 100
        );
}

private node gec_inline_camshaft_builder {
    input lobe_profile: gec_inline_lobe_profile_int();
    input ex_lobe_profile: gec_inline_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 110 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0 * units.deg;
    input base_radius: 0.6 * units.inch;

    output intake_cam_37: _intake_cam_37;
    output exhaust_cam_37: _exhaust_cam_37;
    output intake_cam_38: _intake_cam_38;
    output exhaust_cam_38: _exhaust_cam_38;
    output intake_cam_39: _intake_cam_39;
    output exhaust_cam_39: _exhaust_cam_39;
    output intake_cam_40: _intake_cam_40;
    output exhaust_cam_40: _exhaust_cam_40;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_37(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_37(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_38(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_38(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_39(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_39(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_40(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_40(params, lobe_profile: exhaust_lobe_profile)

    label rot(2 * (360 / 4) * units.deg)
    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam_37
        .add_lobe(rot360 - exhaust_lobe_center + (0 * units.deg) + (0 * units.deg))
    _exhaust_cam_38
        .add_lobe(rot360 - exhaust_lobe_center + (0 * units.deg) + (180 * units.deg))
    _exhaust_cam_39
        .add_lobe(rot360 - exhaust_lobe_center + (0 * units.deg) + (180 * units.deg))
    _exhaust_cam_40
        .add_lobe(rot360 - exhaust_lobe_center + (0 * units.deg) + (0 * units.deg))
    _intake_cam_37
        .add_lobe(rot360 + intake_lobe_center + (0 * units.deg) + (0 * units.deg))
    _intake_cam_38
        .add_lobe(rot360 + intake_lobe_center + (0 * units.deg) + (180 * units.deg))
    _intake_cam_39
        .add_lobe(rot360 + intake_lobe_center + (0 * units.deg) + (180 * units.deg))
    _intake_cam_40
        .add_lobe(rot360 + intake_lobe_center + (0 * units.deg) + (0 * units.deg))
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

private node gec_inline_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 30 * units.cc;
    input flip_display: true;

    input flow_attenuation: 1;
    input lift_scale: 1;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 34 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 62 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 104 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 130 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 148 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 152 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 154 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 158 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 166 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 172 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 180 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 22 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 33 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 76 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 86 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 92 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 88 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 84 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 80 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 80 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 72 * flow_attenuation)


    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: 100.0 * units.cc,
        intake_runner_cross_section_area: 2 * 12.4087 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node gec_inline {
    alias output __out: engine;

    engine engine(
        name: "gec inline",
        starter_torque: 500 * units.lb_ft,
        starter_speed: 350 * units.rpm,
        redline: 5900 * units.rpm,
        fuel: fuel(
                    max_turbulence_effect: 3.0,
            burning_efficiency_randomness: 0.5,
            max_burning_efficiency: 1.25)
    )

    wires wires()

    crankshaft c10(
        throw: 90 * units.mm / 2,
        flywheel_mass: 4 * units.kg,
        mass: 0.9899999999999999 * units.kg,
        friction_torque: 10 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666,
        position_x: 0,
        position_y: 0,
        tdc: 120 * units.deg
    )

    rod_journal rj19(angle: 0 * units.deg)
    rod_journal rj20(angle: 180 * units.deg)
    rod_journal rj21(angle: 180 * units.deg)
    rod_journal rj22(angle: 0 * units.deg)

    c10
        .add_rod_journal(rj19)
        .add_rod_journal(rj20)
        .add_rod_journal(rj21)
        .add_rod_journal(rj22)

    piston_parameters piston_params37(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    piston_parameters piston_params38(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    piston_parameters piston_params39(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    piston_parameters piston_params40(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    connecting_rod_parameters cr_params20(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    connecting_rod_parameters cr_params21(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    connecting_rod_parameters cr_params22(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    connecting_rod_parameters cr_params23(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    intake intake12(
        intake_flow_rate: k_carb(80),
        idle_flow_rate: k_carb(0),
        idle_throttle_plate_position: 0.98,
        throttle_gamma: 1
    )

    exhaust_system_parameters es_params12(
        outlet_flow_rate: k_carb(200),
        primary_tube_length: 10 * units.inch,
        primary_flow_rate: k_carb(300),
        velocity_decay: 1, //0.5
        volume: 10 * units.L
    )

    exhaust_system exhaust12(es_params12, audio_volume: 0.7, impulse_response: ir_lib.default_0)

    cylinder_bank b38(bore: 85 * units.mm, deck_height: (213 + 1) * units.mm, angle: 0 * units.deg)
    b38
        .add_cylinder(
            piston: piston(piston_params37, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params20),
            rod_journal: rj19,
            intake: intake12,
            exhaust_system: exhaust12,
            ignition_wire: wires.wire1
        )
    engine.add_cylinder_bank(b38)

    cylinder_bank b39(bore: 85 * units.mm, deck_height: (213 + 1) * units.mm, angle: 0 * units.deg)
    b39
        .add_cylinder(
            piston: piston(piston_params38, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params21),
            rod_journal: rj20,
            intake: intake12,
            exhaust_system: exhaust12,
            ignition_wire: wires.wire2
        )
    engine.add_cylinder_bank(b39)

    cylinder_bank b40(bore: 85 * units.mm, deck_height: (213 + 1) * units.mm, angle: 0 * units.deg)
    b40
        .add_cylinder(
            piston: piston(piston_params39, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params22),
            rod_journal: rj21,
            intake: intake12,
            exhaust_system: exhaust12,
            ignition_wire: wires.wire3
        )
    engine.add_cylinder_bank(b40)

    cylinder_bank b41(bore: 85 * units.mm, deck_height: (213 + 1) * units.mm, angle: 0 * units.deg)
    b41
        .add_cylinder(
            piston: piston(piston_params40, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params23),
            rod_journal: rj22,
            intake: intake12,
            exhaust_system: exhaust12,
            ignition_wire: wires.wire4
        )
    engine.add_cylinder_bank(b41)

    engine.add_crankshaft(c10)

    gec_inline_camshaft_builder camshaft(
        lobe_profile: gec_inline_lobe_profile_int(),
	       ex_lobe_profile: gec_inline_lobe_profile_exh()
    )

    b38.set_cylinder_head (
        gec_inline_head(
            intake_camshaft: camshaft.intake_cam_37,
            exhaust_camshaft: camshaft.exhaust_cam_37
        )
    )

    b39.set_cylinder_head (
        gec_inline_head(
            intake_camshaft: camshaft.intake_cam_38,
            exhaust_camshaft: camshaft.exhaust_cam_38
        )
    )

    b40.set_cylinder_head (
        gec_inline_head(
            intake_camshaft: camshaft.intake_cam_39,
            exhaust_camshaft: camshaft.exhaust_cam_39
        )
    )

    b41.set_cylinder_head (
        gec_inline_head(
            intake_camshaft: camshaft.intake_cam_40,
            exhaust_camshaft: camshaft.exhaust_cam_40
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0 * units.rpm, 0 * units.deg)
        .add_sample(1000 * units.rpm, 30 * units.deg)
        .add_sample(2000 * units.rpm, 30 * units.deg)
        .add_sample(3000 * units.rpm, 30 * units.deg)
        .add_sample(4000 * units.rpm, 30 * units.deg)
        .add_sample(5000 * units.rpm, 30 * units.deg)

    engine.add_ignition_module(
        gec_inline_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 6000 * units.rpm
        ))
}

public node main {
    set_engine(gec_inline())
    set_transmission(transmission())
    set_vehicle(vehicle(mass: 1000 * units.kg))
}

main()
