//* Generated with Enginette (https://enginette.netlify.app) by DDev, Pooria and zRevenger.
//* More info here: https://github.com/enginette/enginette
//! Warning: Enginette EXporter is still in developement. Expect bugs to happen.
//! If you encounter a bug, report it here: https://github.com/enginette/enginette/issues
                    
import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)
private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
    output wire9: ignition_wire();
    output wire10: ignition_wire();
}

private node gec_v10_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6000 * units.rpm;
    input limiter_duration: 0.1 * units.sec;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (50 + 180) * units.deg)
            .connect_wire(wires.wire2, (-50 + 90) * units.deg)
            .connect_wire(wires.wire3, (50 + 0) * units.deg)
            .connect_wire(wires.wire4, (-50 + -90) * units.deg)
            .connect_wire(wires.wire5, (50 + -180) * units.deg)
            .connect_wire(wires.wire6, (-50 + 90) * units.deg)
            .connect_wire(wires.wire7, (50 + 180) * units.deg)
            .connect_wire(wires.wire8, (-50 + -90) * units.deg)
            .connect_wire(wires.wire9, (50 + -180) * units.deg)
            .connect_wire(wires.wire10, (-50 + 0) * units.deg);
}

private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}

private node gec_v10_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 160 * units.deg,
            gamma: 1,
            lift: 200 * units.thou,
            steps: 100
        );
}

private node gec_v10_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 160 * units.deg,
            gamma: 1,
            lift: 200 * units.thou,
            steps: 100
        );
}

private node gec_v10_camshaft_builder {
    input lobe_profile: gec_v10_lobe_profile_int();
    input ex_lobe_profile: gec_v10_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 110 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0 * units.deg;
    input base_radius: 0.6 * units.inch;

    output intake_cam_41: _intake_cam_41;
    output exhaust_cam_41: _exhaust_cam_41;
    output intake_cam_42: _intake_cam_42;
    output exhaust_cam_42: _exhaust_cam_42;
    output intake_cam_43: _intake_cam_43;
    output exhaust_cam_43: _exhaust_cam_43;
    output intake_cam_44: _intake_cam_44;
    output exhaust_cam_44: _exhaust_cam_44;
    output intake_cam_45: _intake_cam_45;
    output exhaust_cam_45: _exhaust_cam_45;
    output intake_cam_46: _intake_cam_46;
    output exhaust_cam_46: _exhaust_cam_46;
    output intake_cam_47: _intake_cam_47;
    output exhaust_cam_47: _exhaust_cam_47;
    output intake_cam_48: _intake_cam_48;
    output exhaust_cam_48: _exhaust_cam_48;
    output intake_cam_49: _intake_cam_49;
    output exhaust_cam_49: _exhaust_cam_49;
    output intake_cam_50: _intake_cam_50;
    output exhaust_cam_50: _exhaust_cam_50;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_41(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_41(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_42(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_42(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_43(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_43(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_44(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_44(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_45(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_45(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_46(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_46(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_47(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_47(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_48(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_48(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_49(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_49(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_50(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_50(params, lobe_profile: exhaust_lobe_profile)

    label rot(2 * (360 / 10) * units.deg)
    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam_41
        .add_lobe(rot360 - exhaust_lobe_center + (50 * units.deg) + (180 * units.deg))
    _exhaust_cam_42
        .add_lobe(rot360 - exhaust_lobe_center + (-50 * units.deg) + (90 * units.deg))
    _exhaust_cam_43
        .add_lobe(rot360 - exhaust_lobe_center + (50 * units.deg) + (0 * units.deg))
    _exhaust_cam_44
        .add_lobe(rot360 - exhaust_lobe_center + (-50 * units.deg) + (-90 * units.deg))
    _exhaust_cam_45
        .add_lobe(rot360 - exhaust_lobe_center + (50 * units.deg) + (-180 * units.deg))
    _exhaust_cam_46
        .add_lobe(rot360 - exhaust_lobe_center + (-50 * units.deg) + (90 * units.deg))
    _exhaust_cam_47
        .add_lobe(rot360 - exhaust_lobe_center + (50 * units.deg) + (180 * units.deg))
    _exhaust_cam_48
        .add_lobe(rot360 - exhaust_lobe_center + (-50 * units.deg) + (-90 * units.deg))
    _exhaust_cam_49
        .add_lobe(rot360 - exhaust_lobe_center + (50 * units.deg) + (-180 * units.deg))
    _exhaust_cam_50
        .add_lobe(rot360 - exhaust_lobe_center + (-50 * units.deg) + (0 * units.deg))
    _intake_cam_41
        .add_lobe(rot360 + intake_lobe_center + (-50 * units.deg) + (180 * units.deg))
    _intake_cam_42
        .add_lobe(rot360 + intake_lobe_center + (50 * units.deg) + (90 * units.deg))
    _intake_cam_43
        .add_lobe(rot360 + intake_lobe_center + (-50 * units.deg) + (0 * units.deg))
    _intake_cam_44
        .add_lobe(rot360 + intake_lobe_center + (50 * units.deg) + (-90 * units.deg))
    _intake_cam_45
        .add_lobe(rot360 + intake_lobe_center + (-50 * units.deg) + (-180 * units.deg))
    _intake_cam_46
        .add_lobe(rot360 + intake_lobe_center + (50 * units.deg) + (90 * units.deg))
    _intake_cam_47
        .add_lobe(rot360 + intake_lobe_center + (-50 * units.deg) + (180 * units.deg))
    _intake_cam_48
        .add_lobe(rot360 + intake_lobe_center + (50 * units.deg) + (-90 * units.deg))
    _intake_cam_49
        .add_lobe(rot360 + intake_lobe_center + (-50 * units.deg) + (-180 * units.deg))
    _intake_cam_50
        .add_lobe(rot360 + intake_lobe_center + (50 * units.deg) + (0 * units.deg))
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

private node gec_v10_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 30 * units.cc;
    input flip_display: true;

    input flow_attenuation: 1;
    input lift_scale: 1;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 34 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 62 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 104 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 130 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 148 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 152 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 154 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 158 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 166 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 172 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 180 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 22 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 33 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 76 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 86 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 92 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 88 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 84 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 80 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 80 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 72 * flow_attenuation)


    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: 100.0 * units.cc,
        intake_runner_cross_section_area: 2 * 12.4087 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node gec_v10 {
    alias output __out: engine;

    engine engine(
        name: "gec v10",
        starter_torque: 3000 * units.lb_ft,
        starter_speed: 350 * units.rpm,
        redline: 6000 * units.rpm,
        fuel: fuel(
                    max_turbulence_effect: 3.0,
            burning_efficiency_randomness: 0.5,
            max_burning_efficiency: 1.25)
    )

    wires wires()

    crankshaft c11(
        throw: 90 * units.mm / 2,
        flywheel_mass: 4 * units.kg,
        mass: 3 * units.kg,
        friction_torque: 10 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666,
        position_x: 0,
        position_y: 0,
        tdc: 120 * units.deg
    )

    rod_journal rj23(angle: 180 * units.deg)
    rod_journal rj24(angle: 90 * units.deg)
    rod_journal rj25(angle: 0 * units.deg)
    rod_journal rj26(angle: -90 * units.deg)
    rod_journal rj28(angle: -180 * units.deg)
    rod_journal rj29(angle: 90 * units.deg)
    rod_journal rj30(angle: 180 * units.deg)
    rod_journal rj31(angle: -90 * units.deg)
    rod_journal rj32(angle: -180 * units.deg)
    rod_journal rj33(angle: 0 * units.deg)

    c11
        .add_rod_journal(rj23)
        .add_rod_journal(rj24)
        .add_rod_journal(rj25)
        .add_rod_journal(rj26)
        .add_rod_journal(rj28)
        .add_rod_journal(rj29)
        .add_rod_journal(rj30)
        .add_rod_journal(rj31)
        .add_rod_journal(rj32)
        .add_rod_journal(rj33)

    piston_parameters piston_params41(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    piston_parameters piston_params42(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    piston_parameters piston_params43(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    piston_parameters piston_params44(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    piston_parameters piston_params45(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    piston_parameters piston_params46(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    piston_parameters piston_params47(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    piston_parameters piston_params48(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    piston_parameters piston_params49(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    piston_parameters piston_params50(
        mass: 400 * units.g,
        compression_height: 32 * units.mm,
        wrist_pin_position: 0,
        displacement: 0
    )

    connecting_rod_parameters cr_params24(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    connecting_rod_parameters cr_params25(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    connecting_rod_parameters cr_params26(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    connecting_rod_parameters cr_params27(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    connecting_rod_parameters cr_params28(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    connecting_rod_parameters cr_params29(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    connecting_rod_parameters cr_params30(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    connecting_rod_parameters cr_params31(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    connecting_rod_parameters cr_params32(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    connecting_rod_parameters cr_params33(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504 * 0.9,
        center_of_mass: 0.0,
        length: 131.6 * units.mm
    )

    intake intake13(
        intake_flow_rate: k_carb(700),
        idle_flow_rate: k_carb(0),
        idle_throttle_plate_position: 0.98,
        throttle_gamma: 1
    )

    exhaust_system_parameters es_params13(
        outlet_flow_rate: k_carb(200),
        primary_tube_length: 10 * units.inch,
        primary_flow_rate: k_carb(300),
        velocity_decay: 1, //0.5
        volume: 10 * units.L
    )

    exhaust_system exhaust13(es_params13, audio_volume: 0.7, impulse_response: ir_lib.default_0)

    cylinder_bank b42(bore: 117 * units.mm, deck_height: (220 + 1) * units.mm, angle: 50 * units.deg)
    b42
        .add_cylinder(
            piston: piston(piston_params41, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params24),
            rod_journal: rj23,
            intake: intake13,
            exhaust_system: exhaust13,
            ignition_wire: wires.wire1
        )
    engine.add_cylinder_bank(b42)

    cylinder_bank b43(bore: 117 * units.mm, deck_height: (220 + 1) * units.mm, angle: -50 * units.deg)
    b43
        .add_cylinder(
            piston: piston(piston_params42, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params25),
            rod_journal: rj24,
            intake: intake13,
            exhaust_system: exhaust13,
            ignition_wire: wires.wire2
        )
    engine.add_cylinder_bank(b43)

    cylinder_bank b44(bore: 117 * units.mm, deck_height: (220 + 1) * units.mm, angle: 50 * units.deg)
    b44
        .add_cylinder(
            piston: piston(piston_params43, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params26),
            rod_journal: rj25,
            intake: intake13,
            exhaust_system: exhaust13,
            ignition_wire: wires.wire3
        )
    engine.add_cylinder_bank(b44)

    cylinder_bank b45(bore: 117 * units.mm, deck_height: (220 + 1) * units.mm, angle: -50 * units.deg)
    b45
        .add_cylinder(
            piston: piston(piston_params44, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params27),
            rod_journal: rj26,
            intake: intake13,
            exhaust_system: exhaust13,
            ignition_wire: wires.wire4
        )
    engine.add_cylinder_bank(b45)

    cylinder_bank b46(bore: 117 * units.mm, deck_height: (220 + 1) * units.mm, angle: 50 * units.deg)
    b46
        .add_cylinder(
            piston: piston(piston_params45, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params28),
            rod_journal: rj28,
            intake: intake13,
            exhaust_system: exhaust13,
            ignition_wire: wires.wire5
        )
    engine.add_cylinder_bank(b46)

    cylinder_bank b47(bore: 117 * units.mm, deck_height: (220 + 1) * units.mm, angle: -50 * units.deg)
    b47
        .add_cylinder(
            piston: piston(piston_params46, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params29),
            rod_journal: rj29,
            intake: intake13,
            exhaust_system: exhaust13,
            ignition_wire: wires.wire6
        )
    engine.add_cylinder_bank(b47)

    cylinder_bank b48(bore: 117 * units.mm, deck_height: (220 + 1) * units.mm, angle: 50 * units.deg)
    b48
        .add_cylinder(
            piston: piston(piston_params47, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params30),
            rod_journal: rj30,
            intake: intake13,
            exhaust_system: exhaust13,
            ignition_wire: wires.wire7
        )
    engine.add_cylinder_bank(b48)

    cylinder_bank b49(bore: 117 * units.mm, deck_height: (220 + 1) * units.mm, angle: -50 * units.deg)
    b49
        .add_cylinder(
            piston: piston(piston_params48, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params31),
            rod_journal: rj31,
            intake: intake13,
            exhaust_system: exhaust13,
            ignition_wire: wires.wire8
        )
    engine.add_cylinder_bank(b49)

    cylinder_bank b50(bore: 117 * units.mm, deck_height: (220 + 1) * units.mm, angle: 50 * units.deg)
    b50
        .add_cylinder(
            piston: piston(piston_params49, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params32),
            rod_journal: rj32,
            intake: intake13,
            exhaust_system: exhaust13,
            ignition_wire: wires.wire9
        )
    engine.add_cylinder_bank(b50)

    cylinder_bank b51(bore: 117 * units.mm, deck_height: (220 + 1) * units.mm, angle: -50 * units.deg)
    b51
        .add_cylinder(
            piston: piston(piston_params50, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params33),
            rod_journal: rj33,
            intake: intake13,
            exhaust_system: exhaust13,
            ignition_wire: wires.wire10
        )
    engine.add_cylinder_bank(b51)

    engine.add_crankshaft(c11)

    gec_v10_camshaft_builder camshaft(
        lobe_profile: gec_v10_lobe_profile_int(),
	       ex_lobe_profile: gec_v10_lobe_profile_exh()
    )

    b42.set_cylinder_head (
        gec_v10_head(
            intake_camshaft: camshaft.intake_cam_41,
            exhaust_camshaft: camshaft.exhaust_cam_41
        )
    )

    b43.set_cylinder_head (
        gec_v10_head(
            intake_camshaft: camshaft.intake_cam_42,
            exhaust_camshaft: camshaft.exhaust_cam_42
        )
    )

    b44.set_cylinder_head (
        gec_v10_head(
            intake_camshaft: camshaft.intake_cam_43,
            exhaust_camshaft: camshaft.exhaust_cam_43
        )
    )

    b45.set_cylinder_head (
        gec_v10_head(
            intake_camshaft: camshaft.intake_cam_44,
            exhaust_camshaft: camshaft.exhaust_cam_44
        )
    )

    b46.set_cylinder_head (
        gec_v10_head(
            intake_camshaft: camshaft.intake_cam_45,
            exhaust_camshaft: camshaft.exhaust_cam_45
        )
    )

    b47.set_cylinder_head (
        gec_v10_head(
            intake_camshaft: camshaft.intake_cam_46,
            exhaust_camshaft: camshaft.exhaust_cam_46
        )
    )

    b48.set_cylinder_head (
        gec_v10_head(
            intake_camshaft: camshaft.intake_cam_47,
            exhaust_camshaft: camshaft.exhaust_cam_47
        )
    )

    b49.set_cylinder_head (
        gec_v10_head(
            intake_camshaft: camshaft.intake_cam_48,
            exhaust_camshaft: camshaft.exhaust_cam_48
        )
    )

    b50.set_cylinder_head (
        gec_v10_head(
            intake_camshaft: camshaft.intake_cam_49,
            exhaust_camshaft: camshaft.exhaust_cam_49
        )
    )

    b51.set_cylinder_head (
        gec_v10_head(
            intake_camshaft: camshaft.intake_cam_50,
            exhaust_camshaft: camshaft.exhaust_cam_50
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0 * units.rpm, 0 * units.deg)
        .add_sample(1000 * units.rpm, 1 * units.deg)
        .add_sample(2000 * units.rpm, 3 * units.deg)
        .add_sample(3000 * units.rpm, 7 * units.deg)
        .add_sample(4000 * units.rpm, 13 * units.deg)
        .add_sample(5000 * units.rpm, 25 * units.deg)

    engine.add_ignition_module(
        gec_v10_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 6000 * units.rpm
        ))
}

public node main {
    set_engine(gec_v10())
    set_transmission(transmission())
    set_vehicle(vehicle(mass: 1000 * units.kg))
}

main()
